#dotr(r::AbstractArray) = sum(reduce((x,y)->x.*y,r))

#(-dot(dir1, p1) + dot(dir1,p)) * (-dot(dir2,p2) + dot(dir2,p)) * (-dot(dir3,p3) + dot(dir3,p))
#((-dot(dir1, p1) + dot(dir1,p)) * (-dot(dir2,p2) + dot(dir2,p)) * (-dot(dir3,p3) + dot(dir3,p)))^(1/3)

#d1d2d3 + dir2.p*dir1.p*dir3.p
#+ d1d2  * dir3.p
#+ d2d3  * dir1.p
#+ d1d3  * dir2.p

#+ d1    * dir2.p*dir3.p
#+ d2    * dir1.p*dir3.p
#+ d3    * dir2.p*dir1.p

#((-dot(normals[1], points[1]) + dot(normals[1],p)) * (-dot(normals[2],points[2]) + dot(normals[2],p)))^(1/2)
#s=sum(p); (prod(sum.(normals)) * (s - sum(points[1])) * (s - sum(points[2]))) ^ (1/2)

#(-d1 + dot(dir1,p)) * (-d2 + dot(dir2,p)) * (-d3 + dot(dir3,p))
# dotr(dirs) * (-sum(p1) + sum(p)) * (-sum(p2) + sum(p)) * (-sum(p3) + sum(p))
# dotr(dirs) * (-sum(p1) + 1 * sum(p)) * (-sum(p2) + 1 * sum(p)) * (-sum(p3) + 1 * sum(p))

#a,b,c,d,e,f = points = (x->-x[2].mPoint).(this.planes)
#a,b,c,d,e,f = r = -[3,6,5,9,7,2]
#normals = (x->sum(x[2].mNormal)).(this.planes)

#p = sum(point); (prod(sum.(normals))) ^ (1/2) * ((p + a) * (p + b)) * (p + c)) ^ (1/2)

#(p-a)*(p-b) = p2-p*(a+b)+ab
#ans*(p-c) = p3-p2*(a+b+c)- p*(-ab+ac+bc)+abc = p3-p2*(a+b+c)-p*(ab+ac+bc)+abc
#ans*(p-d) = p4-p3*(a-b-c-d)-p2*(ab-ac-bc-ad-bd-cd)-p*(abc-abd-acd-bcd)-abcd
#ans*(p-e) = p5-p4*(a-b-c-d-e)-p3*(ab-ac-bc-ad-bd-cd-ae-be-ce-de)-p2*(abc-abd-acd-bcd-abe-ace-bce-ade-bde-cde)-p*(abcd-abce-abde-acde-bcde)-abcde
#ans*(p-f) = p6+p5*r5+p4*r4+p3*r3+p2*r2+p*r1+r0

#sum((x->x*r[1]).(r[1:end.!=1]))
#sums = [sum(((x->x).(r[1:end])[y[1]:end])) for y=enumerate(r)]
#m1 = [((x->x*y[2]).(r[1:end.!=y[1]])[y[1]:end]) for y=enumerate(r)][1:end-1]
#a1 = vcat(m1...)
#ab,ac,ad,ae,af,bc,bd,be,bf,cd,ce,cf,de,df,ef = a*b,a*c,a*d,a*e,a*f,b*c,b*d,b*e,b*f,c*d,c*e,c*f,d*e,d*f,e*f
#abc,abd,abe,abf,acd,bcd,ace,bce,acf,bcf,ade,bde,cde,adf,bdf,cdf,aef,bef,cef,def = ab*c,ab*d,ab*e,ab*f,ac*d,bc*d,ac*e,bc*e,ac*f,bc*f,ad*e,bd*e,cd*e,ad*f,bd*f,cd*f,ae*f,be*f,ce*f,de*f
#abcd,abce,abde,acde,bcde,abcf,abdf,acdf,bcdf,abef,acef,bcef,adef,bdef,cdef = abc*d,abc*e,abd*e,acd*e,bcd*e,abc*f,abd*f,acd*f,bcd*f,abe*f,ace*f,bce*f,ade*f,bde*f,cde*f 
#abcde,abcdf,abcef,abdef,acdef,bcdef = abcd*e,abcd*f,abce*f,abde*f,acde*f,bcde*f 

#r4 = ab+ac+ad+ae+af+bc+bd+cd+be+ce+de+bf+cf+df+ef
#r3 = abc+abd+acd+bcd+abe+ace+bce+ade+bde+cde+abf+acf+bcf+adf+bdf+cdf+aef+bef+cef+def
 
#r5 = sum(r) #sums[0]
#r4 = ab+ac+ad+ae+af+bc+bd+cd+be+ce+de+bf+cf+df+ef #sum(a1)
#r3 = abc+abd+acd+bcd+abe+ace+bce+ade+bde+cde+abf+acf+bcf+adf+bdf+cdf+aef+bef+cef+def #sums[3]*ab+sums[4]*(ac+bc)+sums[5]*(ad+bd+cd)+sums[6]*(ae+be+ce+de)
#r2 = abcd+abce+abde+acde+bcde+abcf+abdf+acdf+bcdf+abef+acef+bcef+adef+bdef+cdef
#r1 = abcde+abcdf+abcef+abdef+acdef+bcdef
#r0 = prod(r)

#(p+a)*(p+b)*(p+c)*(p+d)*(p+e)*(p+f) == p^6+p^5*r5+p^4*r4+p^3*r3+p^2*r2+p*r1+r0

#s = ["a","b","c","d","e","f"]
#m = [((x->string(y[2],"*",x)).(s[1:end.!=y[1]])[y[1]:end]) for y=enumerate(s)][1:end-1]

(#p-a)*(p-b)*(p-c)*(p-d)*(p-e)*(p-f)

# ds = (x->x[2].d).(this.planes)

# points = (x->x[2].mPoint).(this.planes)
# normals = (x->sum(x[2].mNormal)).(this.planes)
# ps = (x -> -sum(x)+sum()).(points)

# dotr(normals) * dotr(ps)

#############################################
# sum = sum(p)
## dotr(dirs) * reduce(*,(x->-x+sum).(normals))
#############################################

# d1*d2 + p * (dir1*d2 + dir2*d1) + p^2 * dir1*dir2

#ds = [dot(x[2],dirs[x[1]]) for x=enumerate(points)]
#sum(reduce((x,y)->x.*y,ds)) + dot(p, sum(reverse(ds).*dirs)) + sum(p)^2 * sum(reduce((x,y)->x.*y,dirs))


#ds + dot(p, sum(reverse(ds).*ns)) + sum(p)^2 * dotr(ns)